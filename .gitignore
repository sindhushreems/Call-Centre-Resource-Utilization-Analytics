import pandas as pd
from datetime import datetime, timedelta

from datetime import timedelta

def group_data_by_week(df):
    # Sort data by ascending dates
    df.sort_values('Date', inplace=True)
    
    # Initialize variables
    current_week = 1
    current_week_start = df['Date'].iloc[0]
    week_numbers = []
    
    # Assign week numbers
    for date in df['Date']:
        if (date - current_week_start).days >= 7:
            current_week += 1
            current_week_start = date
        week_numbers.append(current_week)
    
    # Add week numbers to the DataFrame
    df['Week'] = week_numbers
    
    return df



# Specify the path to your Excel file
excel_file = (r'C:\Users\M S SINDHUSHREE\Downloads\Call_Centre.xlsx')

# Read the Excel file into a pandas DataFrame
df = pd.read_excel(excel_file)

# Group data by week numbers
df = group_data_by_week(df)

# Display the modified DataFrame
print(df)










import pandas as pd
import matplotlib.pyplot as plt

# Sample data for agent metrics
agent_data = pd.DataFrame({
    'AgentName': ['Agent A', 'Agent B', 'Agent C'],
    'TotalCalls': [100, 150, 200],
    'CallsAnswered': [80, 120, 160],
    'AvgSpeedOfAnswer': [30, 40, 25],
    'CallResolution': [70, 110, 150],
    'PercentCallResolved': [70, 73.33, 75]
})

# Sample data for department-wise call abandon rate
department_data = pd.DataFrame({
    'Department': ['Department X', 'Department Y', 'Department Z'],
    'AbandonRate': [10, 25, 15]
})

# Function to get agent metrics by name
def get_agent_metrics(agent_name):
    agent_metrics = agent_data.loc[agent_data['AgentName'] == agent_name]
    return agent_metrics

# Function to get day-wise agent metrics
def get_daywise_agent_metrics(agent_name):
    # Assuming the agent metrics are stored in a dataframe named 'agent_metrics'
    # with columns: ['AgentName', 'Date', 'TotalCalls', 'CallsAnswered', 'AvgSpeedOfAnswer', 'CallResolution', 'PercentCallResolved']
    agent_metrics = pd.DataFrame({
        'AgentName': ['Agent A', 'Agent A', 'Agent B', 'Agent B', 'Agent C', 'Agent C'],
        'Date': ['2023-06-18', '2023-06-19', '2023-06-18', '2023-06-19', '2023-06-18', '2023-06-19'],
        'TotalCalls': [50, 60, 70, 80, 90, 100],
        'CallsAnswered': [40, 50, 60, 70, 80, 90],
        'AvgSpeedOfAnswer': [20, 25, 30, 35, 40, 45],
        'CallResolution': [35, 45, 55, 65, 75, 85],
        'PercentCallResolved': [70, 75, 80, 85, 90, 95]
    })
    
    agent_daywise_metrics = agent_metrics.loc[agent_metrics['AgentName'] == agent_name]
    return agent_daywise_metrics

# Function to visualize department-wise call abandon rate
def visualize_abandon_rate():
    # Assuming the department-wise abandon rate data is stored in a dataframe named 'department_data'
    # with columns: ['Department', 'AbandonRate']
    plt.bar(department_data['Department'], department_data['AbandonRate'])
    plt.xlabel('Department')
    plt.ylabel('Abandon Rate (%)')
    plt.title('Department-wise Call Abandon Rate')
    plt.axhline(y=20, color='red', linestyle='--')
    plt.xticks(rotation=45)
    plt.show()

# Example usage
agent_name = 'Agent A'
agent_metrics = get_agent_metrics(agent_name)
print(agent_metrics)

agent_daywise_metrics = get_daywise_agent_metrics(agent_name)
print(agent_daywise_metrics)

visualize_abandon_rate()
